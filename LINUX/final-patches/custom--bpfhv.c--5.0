diff --git a/bpfhv.c/kernel/bpfhv.c b/bpfhv.c/kernel/bpfhv.c
index c69c2c4..7fadd2a 100644
--- a/bpfhv.c/kernel/bpfhv.c
+++ b/bpfhv.c/kernel/bpfhv.c
@@ -196,6 +196,10 @@ static int		bpfhv_set_features(struct net_device *netdev,
 static void		bpfhv_get_drvinfo(struct net_device *netdev,
 					  struct ethtool_drvinfo *drvinfo);
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#include <bpfhv_netmap.h>
+#endif
+
 static const struct net_device_ops bpfhv_netdev_ops = {
 	.ndo_open			= bpfhv_open,
 	.ndo_stop			= bpfhv_close,
@@ -411,6 +415,10 @@ bpfhv_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		goto err_irqs;
 	}
 
+#ifdef DEV_NETMAP
+	bpfhv_netmap_attach(bi);
+#endif
+
 	return 0;
 
 err_irqs:
@@ -449,6 +457,9 @@ bpfhv_remove(struct pci_dev *pdev)
 		netif_napi_del(&rxq->napi);
 	}
 	cancel_work_sync(&bi->upgrade_work);
+#ifdef DEV_NETMAP
+	netmap_detach(netdev);
+#endif
 	bpfhv_irqs_teardown(bi);
 	unregister_netdev(netdev);
 	bpfhv_programs_teardown(bi);
@@ -684,6 +695,13 @@ static irqreturn_t
 bpfhv_rx_intr(int irq, void *data)
 {
 	struct bpfhv_rxq *rxq = data;
+#ifdef DEV_NETMAP
+	int nm_irq = netmap_rx_irq(rxq->bi->netdev, rxq - rxq->bi->rxqs, &irq);
+
+	if (nm_irq != NM_IRQ_PASS) {
+		return 1;
+	}
+#endif /* DEV_NETMAP */
 
 	napi_schedule(&rxq->napi);
 
@@ -695,6 +713,13 @@ bpfhv_tx_intr(int irq, void *data)
 {
 	struct bpfhv_txq *txq = data;
 
+#ifdef DEV_NETMAP
+	if (netmap_tx_irq(txq->bi->netdev, txq - txq->bi->txqs)
+			!= NM_IRQ_PASS) {
+		return 1; /* cleaned ok */
+	}
+#endif /* DEV_NETMAP */
+
 	if (tx_napi) {
 		napi_schedule(&txq->napi);
 	} else {
@@ -719,7 +744,15 @@ BPF_CALL_1(bpf_hv_rx_pkt_alloc, struct bpfhv_rx_context *, ctx)
 	bool lro = rxq->bi->lro;
 	size_t truesize = lro ? PAGE_SIZE : BPFHV_RX_SKB_TRUESIZE;
 	int i;
+#ifdef DEV_NETMAP
+	struct netmap_adapter *na = NA(rxq->bi->netdev);
 
+	if (nm_native_on(na) &&
+		na->rx_rings[rxq - rxq->bi->rxqs]->nr_mode == NKR_NETMAP_ON) {
+		ctx->packet = (uintptr_t)NULL;
+		return 0;
+	}
+#endif
 	if (unlikely(ctx->num_bufs == 0)) {
 		return -EINVAL;
 	}
@@ -1376,6 +1409,11 @@ bpfhv_resources_alloc(struct bpfhv_info *bi)
 	for (i = 0; i < bi->num_rx_queues; i++) {
 		struct bpfhv_rxq *rxq = bi->rxqs + i;
 
+#ifdef DEV_NETMAP
+		if (bpfhv_netmap_rxq_attach(bi, i)) {
+			continue;
+		}
+#endif
 		ret = bpfhv_rx_refill(rxq, GFP_KERNEL);
 		if (ret) {
 			return ret;
@@ -1449,6 +1487,11 @@ bpfhv_resources_dealloc(struct bpfhv_info *bi)
 	for (i = 0; i < bi->num_tx_queues; i++) {
 		struct bpfhv_txq *txq = bi->txqs + i;
 		unsigned int count = 0;
+#ifdef DEV_NETMAP
+		if (bpfhv_netmap_txq_detach(bi, i)) {
+			continue;
+		}
+#endif
 
 		for (;;) {
 			int ret;
@@ -1486,7 +1529,11 @@ bpfhv_resources_dealloc(struct bpfhv_info *bi)
 		struct bpfhv_rxq *rxq = bi->rxqs + i;
 		struct bpfhv_rx_context *ctx = rxq->ctx;
 		unsigned int count = 0;
-
+#ifdef DEV_NETMAP
+		if (bpfhv_netmap_rxq_detach(bi, i)) {
+			continue;
+		}
+#endif
 		for (;;) {
 			int ret;
 			int j;
